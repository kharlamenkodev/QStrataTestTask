#pragma once
#include <QObject>
#include <QTimer>

/*! @class QDataGenerator
*   @brief Class for generating random data
*	
*	Class provides some methods for start, stop and getting random data.
*   Random data is generated by a interval timer signal.
*   @author Kharlamenko I.V.
*   @date 08.10.2022
*/
class QDataGenerator : public QObject
{
	Q_OBJECT

public:
	//! Constructor
	//! @param[in] sampleLength - length (count of elements) of the data sample
	//! @param[in] fps - number of data samples generated per second
	//! @param[in] pParent - pointer to parent object
	QDataGenerator(int sampleLength = 100,
				   int fps = 30,
				   QObject* pParent = Q_NULLPTR);
	//! Destructor
	~QDataGenerator();

public slots:
	//! Slot starts random data generation
	void start();
	//! Slot stops random data generation
	void stop();
	//! Setting data sample length value
	//! @param[in] value - data sample length
	void setSampleLength(int value);
	//! Setting data generating rate
	//! @param[in] value - fps value
	void setFps(int value);

private:
	//! Milliseconds per second constant
	static const int MSEC_PER_SEC = 1000;
	//! Minimum data sample length
	static const int MIN_SAMPLE_LENGTH = 100;
	//! Maximum data sample length
	static const int MAX_SAMPLE_LENGTH = 1000;
	//! Minimum fps value
	static const int MIN_FPS = 1;
	//! Maximum fps value
	static const int MAX_FPS = 60;
	//! FPS count
	int mFPS;
	//! Data sample length
	int mSampleLength;

	//! The timer, at the signal of which the next portion of data is generated 
	QTimer* mpTimer;
	//! Vector of keys (x values) of the data
	QVector <double> mKeys;
	//! Vector of values (y values) of the data
	QVector <double> mValues;

private slots:
	//! Slot is triggered when the timer has counted to the end of the specified interval and
	//! at this point, the data is being generated
	//! @see dataReady(const QVector <double> keys, const QVector <double> values)
	void generate();

signals:
	//! Signal that is triggered at the moment when the next portion of data is generated
	//! @param[out] keys - vector of keys (x values) of the data
	//! @param[out] values - vector of values (y values) of the data
	void dataReady(const QVector <double> keys, const QVector <double> values);
};

